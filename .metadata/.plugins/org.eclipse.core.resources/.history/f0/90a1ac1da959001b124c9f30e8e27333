package com.solvright.elasticsearch;

import java.io.IOException;
import java.util.Arrays;
import java.util.Properties;

import org.apache.http.HttpHost;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestClientBuilder;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.common.xcontent.XContentType;

public class Consumer {

	public static void main(String[] args) throws IOException {
		RestHighLevelClient client = createElasticSearchClient();
		
		String json = "{ \"abhik\": \"world\" }";
		
		IndexRequest indexRequest = new IndexRequest("twitter");
		//indexRequest.id("2");
		indexRequest.source(json, XContentType.JSON);
		
		IndexResponse response = client.index(indexRequest, RequestOptions.DEFAULT);		
		System.out.println(response.getId());
		
		// create kafka consumer
		KafkaConsumer<String, String> kafkaConsumer = createKafkaConsumer("twitter_tweets");
		
		client.close();
	}

	
	
	public static RestHighLevelClient createElasticSearchClient() {
		String hostname = "kafka-playground-tes-4712029478.us-east-1.bonsaisearch.net";
		String username = "cgkvboryge";
		String password = "qq2x9sc5g2";

		final CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
		credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));

		RestClientBuilder builder = RestClient.builder(new HttpHost(hostname, 443, "https"))
				.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {
					@Override
					public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {
						return httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);
					}
				});
		RestHighLevelClient client = new RestHighLevelClient(builder);
		return client;
	}
	
	public static KafkaConsumer<String, String> createKafkaConsumer(String topic){
		String bootstrapServer = "127.0.0.1:9092";
		String consumerGroup = "java-application-group";

		// create consumer config
		Properties properties = new Properties();
		properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);
		properties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
		properties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
		properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, consumerGroup);
		properties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");

		// create consumer
		KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(properties);
		
		// subscribe to a topic
		consumer.subscribe(Arrays.asList(topic));
				
		return consumer;
	}

}
